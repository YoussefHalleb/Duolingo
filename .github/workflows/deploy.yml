name: Deploy React App 

on:
  push:
    branches:
      - Feature/DUOL-19/ci-cd-Dockerfile

env:
  REGION: europe-north1
  SERVICE_NAME: react-frontend
  REPO_NAME: react-app-repo
  IMAGE_NAME: react-app
  VERSION: v1.0.0

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
      # ✅ Étape 1 : Setup Environment
      - name: Setup Environment
        run: |
          echo "Setting up environment..."
          sudo apt-get update && sudo apt-get install -y yq

      # ✅ Étape 2 : Install Dependencies
      - name: Install Dependencies
        uses: actions/checkout@v4

      # ✅ Étape 3 : Build and Test project
      - name: Build and Test Project
        run: |
          echo "Running SonarCloud Scan..."
          sonar-scanner \
            -Dsonar.projectKey=YoussefHalleb_Duolingo \
            -Dsonar.organization=youssefhalleb \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
          echo "Build and test completed."

      # ✅ Étape 4 : Code Quality Check
      - name: Code Quality Check
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        with:
          projectBaseDir: .
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: "https://sonarcloud.io"

      # ✅ Étape 5 : Archive Project (Docker Build)
      - name: Archive Project
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev
          SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
          TAG="${{ env.VERSION }}-${SHORT_SHA}"
          IMAGE_URI=${{ env.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:${TAG}
          echo "IMAGE_TAG=${TAG}" >> $GITHUB_ENV
          echo "IMAGE_URI=${IMAGE_URI}" >> $GITHUB_ENV
          docker build -t $IMAGE_URI .

      # ✅ Étape 5.1 : Security Scan (Trivy) sur l'image locale
      - name: Security Scan with Trivy
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ${{ env.IMAGE_URI }}  # scanne l'image locale
          format: 'table'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'  # fail si vulnérabilités critiques/hautes trouvées

      # ✅ Étape 6 : Deploy the application
      - name: Deploy the application
        run: |
          docker push ${{ env.IMAGE_URI }}
          git clone https://x-access-token:${{ secrets.MANIFESTS_TOKEN }}@github.com/YoussefHalleb/react-frontend-manifests.git
          cd react-frontend-manifests/base
          yq -i -y '.spec.template.spec.containers[0].image = "${{ env.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"' deployment.yaml
          git config user.email "ci-bot@github.com"
          git config user.name "CI Bot"
          git add deployment.yaml
          git commit -m "Update image to ${IMAGE_TAG}"
          git push

      # ✅ Étape 7 : Remove all artifacts
      - name: Remove all artifacts
        run: echo "Cleanup done ✅"
