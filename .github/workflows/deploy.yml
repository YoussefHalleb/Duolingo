name: Deploy React App to Cloud Run

on:
  push:
    branches:
      - Feature/DUOL-19/ci-cd-Dockerfile

env:
  REGION: europe-north1
  SERVICE_NAME: react-frontend
  REPO_NAME: react-app-repo
  IMAGE_NAME: react-app
  VERSION: v1.0.0

jobs:
  setup:
    name: Setup & SonarCloud Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install yq
        run: sudo apt-get install -y yq

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        with:
          projectBaseDir: .
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: "https://sonarcloud.io"
          SONAR_SCANNER_OPTS: >
            -Dsonar.projectKey=YoussefHalleb_Duolingo
            -Dsonar.organization=youssefhalleb

  build-scan-push:
    name: Build, Scan & Push Docker Image
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # ✅ Authentification GCP dans le même job
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Build Docker Image
        run: |
          SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
          TAG="${{ env.VERSION }}-${SHORT_SHA}"
          IMAGE_URI=${{ env.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:${TAG}
          echo "IMAGE_TAG=${TAG}" >> $GITHUB_ENV
          echo "IMAGE_URI=${IMAGE_URI}" >> $GITHUB_ENV
          echo "✅ Building Docker image $IMAGE_URI..."
          docker build -t $IMAGE_URI .

      - name: Scan Docker Image with Trivy
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: ${{ env.IMAGE_URI }}
          format: 'table'
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'

      - name: Push Docker Image
        run: |
          echo "✅ Pushing Docker image ${{ env.IMAGE_URI }}..."
          docker push ${{ env.IMAGE_URI }}

  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: build-scan-push
    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Deploy to Cloud Run
        run: |
          SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
          IMAGE_URI=${{ env.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}-${SHORT_SHA}
          echo "Deploying $IMAGE_URI to Cloud Run..."
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image $IMAGE_URI \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated

  update-manifests:
    name: Update ArgoCD Manifests
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Checkout manifests repo
        run: git clone https://x-access-token:${{ secrets.MANIFESTS_TOKEN }}@github.com/YoussefHalleb/react-frontend-manifests.git

      - name: Update deployment.yaml
        run: |
          SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
          cd react-frontend-manifests/base
          yq -i -y '.spec.template.spec.containers[0].image = "${{ env.REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}-'${SHORT_SHA}'"' deployment.yaml
          git config user.email "ci-bot@github.com"
          git config user.name "CI Bot"
          git add deployment.yaml
          git commit -m "Update image to ${{ env.VERSION }}-${SHORT_SHA}"
          git push
